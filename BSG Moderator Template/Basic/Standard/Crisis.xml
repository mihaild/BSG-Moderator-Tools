<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Crisis" script:language="StarBasic">Option Explicit


const _CrisisGameTypeCol = 23
const _CrisisCol = 0
const _CrisisTypeCol = _CrisisCol + 2
const _CrisisSkillCol = _CrisisCol + 6
const _CrisisValueCol = _CrisisCol + 12
const _CrisisActivateCol = _CrisisCol + 15
const _CrisisJumpCol = _CrisisCol + 16
const _CrisisShipCol = _CrisisCol + 18
const _CrisisRow = 2

const _CrisisBaseCnt 		= 70
const _CrisisPegasusCnt 	= 20
const _CrisisExodusCnt 		= 40
const _CrisisDaybreakCnt	= 30
const _CrisisRevelationsCnt	= 7		
const _MaxCrisisCnt = _CrisisBaseCnt + _CrisisPegasusCnt + _CrisisExodusCnt + _CrisisDaybreakCnt + _CrisisRevelationsCnt

const _CrisisColCnt = 23

const _CrisisFlagRow = 0
const _CrisisFlagActiveCol = 4
const _CrisisFlagJumpCol = 5

const _CrisisBaseAttackCnt = 10		
const _CrisisPegasusAttackCnt = 3	
const _CrisisExodusAttackCnt = 0
const _CrisisExodusCAGCnt = 6
const _CrisisDaybreakAttackCnt = 6
const _TotalAttackCnt = _CrisisBaseAttackCnt + _CrisisPegasusAttackCnt + _CrisisExodusAttackCnt + _CrisisDaybreakAttackCnt

const _CapricaCol = 0
const _CapricaTypeCol = _CapricaCol + 2
const _CapricaSkillCol = _CapricaCol + 6
const _CapricaValueCol = _CapricaCol + 12
const _CapricaRow = _CrisisRow + _MaxCrisisCnt + 3
const _CapricaCnt = 30

const _MissionCol			= 0
const _MissionActiveCol		= _MissionCol + 1
const _MissionDiscardCol	= _MissionCol + 2
const _MissionSkillCol		= _CrisisSkillCol
const _MissionValueCol		= _CrisisValueCol
const _MissionDistanceCol	= 13
const _MissionRow			= _CapricaRow + _CapricaCnt + 4
const _MissionCnt			= 8

const _ColonyCol = 0
const _ColonyTypeCol = _ColonyCol + 2
const _ColonySkillCol = _ColonyCol + 6
const _ColonyValueCol = _ColonyCol + 12
const _ColonyRow = _MissionRow + _MissionCnt + 3
const _ColonyCnt = 30

const _CrisisTypeReg = 0
const _CrisisTypeCP = 1
const _CrisisTypePres = 2
const _CrisisTypeAdm = 3
const _CrisisTypeCAG = 4
const _CrisisTypeAttack = 5
const _CrisisTypeNone = -1	&apos; used for resetting buttons

const _SuperCol = 0
const _SuperRow = _ColonyRow + _ColonyCnt + 4
const _SuperBaseCnt = 5
const _SuperPegasusCnt = 5
const _SuperExodusCnt = 3 
const _SuperDaybreakCnt	= 0
const _SuperRevelationsCnt = 2
const _MaxSuperCnt = _SuperBaseCnt + _SuperPegasusCnt + _SuperExodusCnt + _SuperDaybreakCnt + _SuperRevelationsCnt

const _BattleOfNewCapricaID	= _SuperRow + _MaxSuperCnt + 3
const _BattleOfIonianNebulaID = _BattleOfNewCapricaID + 1
const _BattleOfColonyID = _BattleOfIonianNebulaID + 1

const _SuperBaseAttackCnt = 1
const _SuperPegasusAttackCnt = 1
const _SuperExodusAttackCnt = 0
const _SuperExodusCAGCnt = 1
const _SuperDaybreakAttackCnt = 0

const _BuryCntCol = 18
const _BuryCntRow = 0

const _MaxCrisisDeckCol = 0
const _MaxSuperCrisisDeckCol = 1
const _MaxDeckRow = 0

const _DeckCrisis 		= 0
const _DeckNewCaprica	= 1
const _DeckMission		= 2
const _DeckColony 		= 3

dim CrisisSheet, CrisisForm as object

sub GetCrisisSheet
	if CrisisSheet &lt;&gt; NULL then
		exit sub
	end if 
	
	CrisisSheet= ThisComponent.Sheets.getByName(&quot;Crisis Cards&quot;)
	CrisisForm = CrisisSheet.DrawPage.Forms.GetByName(&quot;formCrisis&quot;)

	Randomize
end sub

function GetCrisisType (crisisID as integer) as integer
	dim typeID, refrow as integer
	
	if OnNewCaprica() then
		refrow = _CapricaRow
	else
		refrow = _CrisisRow
	end if
	
	for typeID = 1 to 5
		if 	CrisisSheet.getCellByPosition(_CrisisTypeCol + typeID -1, refrow + crisisID).string &lt;&gt; &quot;&quot; then
			GetCrisisType = typeID
			exit function
		end if
	next typeID
	GetCrisisType = 0
end function


&apos; This will tell us how many cards are in the crisis deck, based on game options
function CrisisCnt as integer
	dim curcnt as integer
	
	curcnt = _CrisisBaseCnt

	if UseCylonFleet() then
		curcnt = curcnt - _CrisisBaseAttackCnt
	end if
	
	if GameTypeIsPegasus() then
		curcnt = curcnt + _CrisisPegasusCnt
		if UseCylonFleet() then
			curcnt = curcnt - _CrisisPegasusAttackCnt
		end if
	end if
	
	if GameTypeIsExodus() then 
		curcnt = curcnt + _CrisisExodusCnt
		if UseCylonFleet() then
			curcnt = curcnt - _CrisisExodusAttackCnt
		else
			curcnt = curcnt - _CrisisExodusCAGCnt
		end if	
	end if
	
	if GameTypeIsDaybreak() then
		curcnt	= curcnt + _CrisisDaybreakCnt
		if UseCylonFleet() then
			curcnt	= curcnt - _CrisisDaybreakAttackCnt
		end if
	end if
	
	if GameTypeIsRevelations() then
		curcnt = curcnt + _CrisisRevelationsCnt
	end if
	
	CrisisCnt = curcnt
end function	&apos;CrisisCnt


&apos; This will tell us how many cards are in the Super Crisis deck, based on game options
function SuperCrisisCnt as integer
	dim curcnt as integer
	
	curcnt = _SuperBaseCnt

	if UseCylonFleet() then
		curcnt = curcnt - _SuperBaseAttackCnt
	end if
	
	if GameTypeIsPegasus() then
		curcnt = curcnt + _SuperPegasusCnt
		if UseCylonFleet() then
			curcnt = curcnt - _SuperPegasusAttackCnt
		end if
	end if
	
	if GameTypeIsExodus() then 
		curcnt = curcnt + _SuperExodusCnt
		if UseCylonFleet() then
			curcnt = curcnt - _SuperExodusAttackCnt
		else
			curcnt = curcnt - _SuperExodusCAGCnt
		end if
	end if
	
	if GameTypeIsRevelations() then
		curcnt = curcnt + _SuperRevelationsCnt
	end if
	
	SuperCrisisCnt = curcnt
end function	&apos;SuperCrisisCnt




function TopOfCrisisDeck as integer
	dim topofdeck as integer
	
	topofdeck	= 1
	do while CrisisSheet.getCellByPosition(_CrisisCol, _CrisisRow + topofDeck).string = &quot;&quot;
		topofdeck	= topofdeck + 1
	loop

	TopOfCrisisDeck	= topofdeck
end function

function TopOfCapricaDeck as integer
	dim topofdeck as integer
	
	topofdeck	= 1
	do while CrisisSheet.getCellByPosition(_CapricaCol, _CapricaRow + topofDeck).string = &quot;&quot;
		topofdeck	= topofdeck + 1
	loop

	TopOfCapricaDeck	= topofdeck
end function

function TopOfMissionDeck as integer
	dim topofdeck as integer
	
	topofdeck	= 1
	do while CrisisSheet.getCellByPosition(_MissionCol, _MissionRow + topofdeck).string = &quot;&quot; and CrisisSheet.getCellByPosition(_MissionActiveCol, _MissionRow + topofdeck).string = &quot;&quot;
		topofdeck	= topofdeck + 1
	loop
	
	TopOfMissionDeck	= topofdeck
end function

function TopOfColonyDeck as integer
	dim topofdeck as integer
	
	topofdeck	= 1
	do while CrisisSheet.getCellByPosition(_ColonyCol, _ColonyRow + topofDeck).string = &quot;&quot;
		topofdeck	= topofdeck + 1
	loop

	TopOfColonyDeck	= topofdeck
end function

function CheckSpecialAbility as boolean
	dim rtncd as integer
	
	CheckSpecialAbility = TRUE
	if IsRevealed(GetCurrentPlayer()) and not IsInfiltrating(GetCurrentPlayer())then
		if GetPlayerLoc(GetCurrentPlayer()) = &quot;Caprica&quot; then
			CheckSpecialAbility = (MsgBox (&quot;Did you send both Crises from Caprica already?&quot;,4) = 6)
		else
			CheckSpecialAbility = (MsgBox (&quot;The Current Player is a Cylon and is not on Caprica. Play a Crisis anyway?&quot;,4) = 6)
		end if
	else
		if GetPlayerName(GetCurrentPlayer()) = &quot;Roslin&quot; then 
			CheckSpecialAbility = (MsgBox (&quot;Did you do Roslin&apos;s Religious Visions already?&quot;,4) = 6)
		elseif GetPlayerName(GetCurrentPlayer()) = &quot;Baltar&quot; then 
			MsgBox &quot;Don&apos;t forget Baltar&apos;s extra skill card for Delusional Intuition.&quot;
		end if
	end if
end function

&apos;shipstrings are of the form:
&apos;  #x[#|\[#,#[,#]\][,#x[#|\[#,#[,#]\]]
&apos;
&apos; this will return an array of integers which are the sectors in which to deploy the ship
&apos; 1x3,2x4 will be come (3,4,4)

&apos;	Note: the Scar crisis has the raider deployment removed and Scar is explicitly deployed as part of PlayCrisisCard

function ParseShipString (shipstr as string) as variant
	dim shipdep() as integer
	dim i, shiptot, shipcount, sector as integer
	
	shiptot = 0
	
	do while len(shipstr) &gt; 0
		if left(shipstr,1)=&quot;,&quot; then
			shipstr=mid(shipstr,2)
		end if
		shipcount = val(left(shipstr,1))
		shipstr = mid(shipstr,3)
		if left(shipstr,1) = &quot;[&quot; then
			shipstr=mid(shipstr,2)
			&apos;multiple sectors
			do while left(shipstr,1) &lt;&gt; &quot;]&quot;
				sector = val(left(shipstr,1))
				shipstr=mid(shipstr,2)
				if left(shipstr,1)=&quot;,&quot; then
					shipstr=mid(shipstr,2)
				end if
				for i = 1 to shipcount
					shiptot=shiptot+1
					redim preserve shipdep(shiptot) as integer
					shipdep(shiptot) = sector
				next i
			loop
			shipstr=mid(shipstr,2)
		else
			&apos;just one sector
			sector = val(left(shipstr,1))
			shipstr=mid(shipstr,2)
			for i = 1 to shipcount
				shiptot=shiptot+1
				redim preserve shipdep(shiptot) as integer
				shipdep(shiptot) = sector
			next i
		end if
	loop	

	ParseShipString = shipdep	
end function


sub DeployCylonShips (crisisID as integer)
	dim shiptypes, shipdeploy as variant
	dim shipcount, shipid, deployflag, i, j as integer
	dim shipstr, logstr as string


	shiptypes = Array (0, _ShipBasestar,  _ShipHeavy, _ShipRaider, _ShipViper, _ShipCivilian)

	for i = 1 to 5
		shipstr=CrisisSheet.getCellByPosition(_CrisisCol + _CrisisShipCol + i - 1, _CrisisRow + crisisID).string
		if shipstr &lt;&gt; &quot;&quot; then
			shipdeploy = ParseShipString(shipstr)
			shipcount=ubound(shipdeploy)
			&apos; lets see if there are enough ships
			deployflag=1
			if shiptypes(i) = _ShipViper and UseCylonFleet then
				if GetAvailableShipCnt(_ShipViper) &lt;&gt; 0 then
					if GetAvailableShipCnt(_ShipMarkVII) &lt;&gt; 0 then &apos;MarkII &lt;&gt; 0 and MarkVII &lt;&gt; 0
						MsgBox &quot;There are both Mark VIIs and Mark IIs Available to deploy. Current Player chooses the distribution.&quot;
						deployflag = 0
					elseif GetAvailableShipCnt(_ShipViper) &lt; shipcount then &apos; 0 &lt; MarkII &lt; shipcount and MarkVII = 0
						MsgBox &quot;There are not enough Vipers to deploy. Choose which and deploy them manually.&quot;
						deployflag = 0
					end if
				elseif GetAvailableShipCnt(_ShipMarkVII) = 0 then &apos; MarkII = 0 and MarkVII = 0
					MsgBox &quot;There are no Vipers available to deploy.&quot;
				elseif GetAvailableShipCnt(_ShipMarkVII) &lt; shipcount then &apos;MarkII = 0 and 0 &lt; Mark VII &lt; shipcount
					MsgBox &quot;There are not enough Vipers to deploy. Choose which and deploy them manually.&quot;
					deployflag = 0
				else &apos; MarkII = 0 and MarkVII &gt;= shipcount
					shiptypes(i) = _ShipMarkVII
				end if
			elseif GetAvailableShipCnt(shiptypes(i)) = 0 then
				if UseCylonFleet then
					MsgBox &quot;There are not enough &quot; &amp; ShipNames(shiptypes(i)) &amp; &quot;s in the reserves. Deploy the remaining reserves first, then pull from the CFB, starting with the lowest-numbered CFB sector. Do not advance the Pursuit Track, do not warp in the whole Sector.&quot;
				else
					MsgBox &quot;There are no &quot; &amp; ShipNames(shiptypes(i)) &amp; &quot;s available to deploy.&quot;
				end if
				deployflag = 0
			elseif GetAvailableShipCnt(shiptypes(i)) &lt; shipcount then
				&apos;if we have too few, that&apos;s okay if they&apos;re all going in one sector
				if UseCylonFleet then
					MsgBox &quot;There are not enough &quot; &amp; ShipNames(shiptypes(i)) &amp; &quot;s in the reserves. Deploy the remaining reserves first, then pull from the CFB, starting with the lowest-numbered CFB sector. Do not advance the Pursuit Track, do not warp in the whole Sector.&quot;
					deployflag = 0
				else
					for j = 2 to shipcount
						if shipdeploy(j) &lt;&gt; shipdeploy(1) then
							deployflag=0
						end if
					next j
					if deployflag = 1 then
						shipcount = GetAvailableShipCnt(shiptypes(i))
						MsgBox &quot;There are not enough &quot; &amp; ShipNames(shiptypes(i)) &amp; &quot;s to deploy.  Only &quot; &amp; shipcount &amp; &quot; are available.&quot;
					else
						&apos;not enough of this kind of ship
						MsgBox &quot;There are not enough &quot; &amp; ShipNames(shiptypes(i)) &amp; &quot;s to deploy.  Choose which and deploy them manually.&quot;
						deployflag=0
					end if
				end if
			end if
			
			if deployflag = 1 then				
				for j = 1 to shipcount
					shipID = GetAvailableShip(shiptypes(i))
					LogThis GetShipName(shiptypes(i), shipID) &amp; &quot; deployed in Sector &quot; &amp; shipdeploy(j)
					SetShipStatus shiptypes(i), shipID, shipdeploy(j)
				next j
				MsgBox shipcount &amp; &quot; &quot; &amp; ShipNames(shiptypes(i)) &amp; iif(shipcount&gt;1,&quot;s&quot;,&quot;&quot;) &amp; &quot; deployed&quot;
			end if
		end if
	next i

end sub	&apos;DeployCylonShips


function GetBuryCnt (deckID as integer) as integer
	GetBuryCnt = CrisisSheet.getCellByPosition(_BuryCntCol + deckID, _BuryCntRow).value
end function

sub SetBuryCnt (deckID as integer, reset as boolean)
	dim newval as integer
	
	if reset then
		newval = 0
	else
		newval = GetBuryCnt(deckID) + 1
	end if
	CrisisSheet.getCellByPosition(_BuryCntCol + deckID , _BuryCntRow).value = newval
end sub

sub ClearCrisisFlags
	SetCrisisFlag TRUE, &quot;&quot;
	SetCrisisFlag FALSE, &quot;&quot;
end sub

sub SetCrisisFlag (jumpflag as boolean, newval as string)

	GetCrisisSheet
	if jumpflag then
		CrisisSheet.getCellByPosition(_CrisisFlagJumpCol, _CrisisFlagRow).string = newval
	else
		CrisisSheet.getCellByPosition(_CrisisFlagActiveCol, _CrisisFlagRow).string = newval
	end if
end sub
	
function GetCrisisFlag (jumpflag as boolean) as boolean
	GetCrisisSheet
	if jumpflag then
		GetCrisisFlag = (CrisisSheet.getCellByPosition(_CrisisFlagJumpCol, _CrisisFlagRow).string &lt;&gt; &quot;&quot;)
	else
		GetCrisisFlag = (CrisisSheet.getCellByPosition(_CrisisFlagActiveCol, _CrisisFlagRow).string &lt;&gt; &quot;&quot;)
	end if
end function
		


sub PlayCrisisCard
	dim rtncd, crisisID, toryID as integer
	dim crisisname as string
	dim refrow, refcol as integer
	
	GetCrisisSheet
	
	if OnNewCaprica() then
		refrow = _CapricaRow
		refcol = _CapricaCol
		crisisID = TopofCapricaDeck()
	else
		refrow = _CrisisRow
		refcol = _CrisisCol
		crisisID = TopofCrisisDeck()
	end if
		
	if GetPlayerLoc(GetCurrentPlayer()) = &quot;Brig&quot; then
		MsgBox &quot;Current Player (&quot; &amp; GetPlayerName(GetCurrentPlayer()) &amp; &quot;) is in the Brig, no crisis can be played.&quot;
		exit sub
	end if
		
	rtncd = MsgBox (&quot;Play &quot;&quot;&quot; &amp; CrisisSheet.getCellByPosition(refcol, refrow + crisisID).string &amp; &quot;&quot;&quot;?&quot;,4)
	if rtncd &lt;&gt; 6 or Not CheckSpecialAbility() then
		exit sub
	end if
		
	crisisname = CrisisSheet.getCellByPosition(refcol, refrow + crisisID).string

	CrisisSheet.getCellByPosition(refcol+1, refrow + crisisID).string = CrisisSheet.getCellByPosition(refcol, refrow + crisisID).string
	CrisisSheet.getCellByPosition(refcol+1, refrow + crisisID).CharColor = CrisisSheet.getCellByPosition(refcol, refrow + crisisID).CharColor
	CrisisSheet.getCellByPosition(refcol, refrow + crisisID).string = &quot;&quot;

	if GetPlayerName(GetCurrentPlayer()) = &quot;Tory&quot; and NOT IsRevealed(GetCurrentPlayer()) and GetCrisisType(crisisID) = 	_CrisisTypeCP then
		MsgBox(&quot;Tory is Amoral and does not get to choose.&quot;)
	end if

	SetCrisisStartButton(CrisisSheet.getCellByPosition(_CrisisValueCol, refrow + crisisID).string, GetCrisisType(crisisID))
	SetCrisisFlag TRUE, CrisisSheet.getCellByPosition(_CrisisJumpCol, refrow + crisisID).string 
	SetCrisisFlag FALSE, CrisisSheet.getCellByPosition(_CrisisActivateCol, refrow + crisisID).string 
			
	LogThis &quot;CRISIS: &quot; &amp; CrisisSheet.getCellByPosition(refcol+1, refrow + crisisID).string
end sub	&apos;PlayCrisisCard


sub ActivateCrisis 
	&apos; this is called to initialize a skill check for the crisis on the top of the discard pile, as it were
	dim crisisID, skillid, refcol, refrow, difficulty, partial as integer
	dim skillsincheck(5), crisisName as string &apos; Why can&apos;t we use _SkillIDBaseMax here?
	dim consequence as boolean
	GetCrisisSheet
	
	if OnNewCaprica() then
		crisisID = TopOfCapricaDeck() - 1
		refcol = _CapricaCol + 1
		refrow = _CapricaRow
	else
		crisisID = TopOfCrisisDeck() - 1
		refcol = _CrisisCol + 1
		refrow = _CrisisRow
	end if
		
	crisisname = CrisisSheet.getCellByPosition(refcol, refrow + crisisID).string

	if GetCrisisType(crisisID) = _CrisisTypeAttack then
		if crisisname = &quot;Thirty-Three&quot; then
			EnableThirtyThree TRUE
		elseif crisisname = &quot;Scar&quot; then
			Scar
		end if
		DeployCylonShips crisisID
		Board_SetSpecial crisisName
		LogThis crisisName &amp; &quot;: ships deployed&quot;
	end if

	if CrisisSheet.getCellByPosition(_CrisisValueCol, refrow + crisisID).string &lt;&gt; &quot;&quot; then
&apos;		rtncd = MsgBox(&quot;Initiate the skill check for &quot;&quot;&quot; &amp; CrisisSheet.getCellByPosition(_CrisisCol+1, _CrisisRow + crisisID).string &amp; &quot;&quot;&quot;?&quot;,4)
&apos;		if rtncd &lt;&gt; 6 then
&apos;			exit sub
&apos;		end if
	
		for skillid = _SkillIDMin to _SkillIDBaseMax
			skillsincheck(skillid) = CrisisSheet.getCellByPosition(_CrisisSkillCol + skillID, refrow + crisisID).string
		next skillid
		
		difficulty = CrisisSheet.getCellByPosition(_CrisisValueCol, refrow + crisisID).string
		if CrisisSheet.getCellByPosition(_CrisisValueCol+1, refrow + crisisID).string = &quot;&quot; then
			partial	= 0
		else
			partial = CrisisSheet.getCellByPosition(_CrisisValueCol+1, refrow + crisisID).string
		end if
		consequence = CrisisSheet.getCellByPosition(_CrisisValueCol + 2, refrow + crisisID).string &lt;&gt; &quot;&quot;
		
		&apos; set up the skill check
		StartSkillCheck(crisisname, skillsincheck, difficulty, FALSE, partial, consequence)
		if crisisname = &quot;Detector Sabotage&quot; then
			MsgBox &quot;If the crisis check fails, be sure to hit the &quot;&quot;Sabotage Detector&quot;&quot; button at the top!&quot;
			CrisisForm.getByName(&quot;btnDetector&quot;).enabled = TRUE
		elseif crisisname = &quot;Legendary Discovery&quot; or crisisname = &quot;The Road Less Traveled&quot; then
			EnableSpecialDistance(crisisname)
		end if
		MsgBox &quot;Skill Check Initialized&quot;
		LogThis crisisName &amp; &quot;: Skill Check Initialized&quot;
	end if

	SetCrisisStartButton (&quot;&quot;, _CrisisTypeNone)
end sub	&apos;ActivateCrisis


sub SetCrisisStartButton(difficulty as string, optional crisistype as integer)
	GetCrisisSheet
	
	CrisisForm.getByName(&quot;btnActivateCrisis&quot;).enabled = FALSE
	
	if IsMissing(crisistype) then
		exit sub
	end if
	
	if crisistype = _CrisisTypeAttack then
		CrisisForm.getByName(&quot;btnActivateCrisis&quot;).enabled = TRUE
		CrisisForm.getByName(&quot;btnActivateCrisis&quot;).label = &quot;Cylons Attack&quot;
	elseif difficulty &lt;&gt; &quot;&quot; then
		CrisisForm.getByName(&quot;btnActivateCrisis&quot;).enabled = TRUE
		CrisisForm.getByName(&quot;btnActivateCrisis&quot;).label = &quot;Initialize Skill Check&quot;
	
	end if

end sub	&apos;SetStartButtons



sub BuryCrisisCard
	dim rtncd, crisisID, i, topofdeck, endofdeck, buryDeck as integer
	dim refcol, refrow as integer
	dim skillsincheck(6) as string
	dim crisisData(_CrisisColCnt) as variant
	GetCrisisSheet

	SetCrisisBtns FALSE

	if OnNewCaprica() then
		refcol = _CapricaCol
		refrow = _CapricaRow
		topofdeck = TopOfCapricaDeck()
		endofdeck =  _CapricaCnt
		buryDeck = _DeckNewCaprica
	else
		refcol = _CrisisCol
		refrow = _CrisisRow
		topofdeck = TopOfCrisisDeck()
		endofdeck = CrisisCnt()
		buryDeck = _DeckCrisis
	end if
	
	rtncd = MsgBox (&quot;Bury &quot;&quot;&quot; &amp; CrisisSheet.getCellByPosition(refcol, refrow + topofdeck).string &amp; &quot;&quot;&quot; on the bottom of the deck?&quot;,4,&quot;Bury Crisis&quot;)
	if rtncd &lt;&gt; 6 then
		SetCrisisBtns TRUE
		exit sub
	end if

	crisisData(0) = CrisisSheet.getCellByPosition(refcol, refrow + topofdeck).string
	crisisData(1) = CrisisSheet.getCellByPosition(refcol, refrow + topofdeck).CharColor
	for i = 2 to _CrisisColCnt
		crisisData(i) = CrisisSheet.getCellByPosition(refcol + i, refrow + topofdeck).string
	next i

	for crisisID = topofdeck to endofdeck
		CrisisSheet.getCellByPosition(refcol, refrow + crisisID).string = CrisisSheet.getCellByPosition(refcol, refrow + crisisID + 1).string
		CrisisSheet.getCellByPosition(refcol, refrow + crisisID).CharColor = CrisisSheet.getCellByPosition(refcol, refrow + crisisID + 1).CharColor
		for i = 2 to _CrisisColCnt
			CrisisSheet.getCellByPosition(refcol + i, refrow + crisisID).string = CrisisSheet.getCellByPosition(refcol + i, refrow + crisisID + 1).string
		next i
	next crisisID 
	
	CrisisSheet.getCellByPosition(refcol, refrow + endofdeck).string = crisisData(0)
	CrisisSheet.getCellByPosition(refcol, refrow + endofdeck).CharColor = crisisData(1)
	for i = 2 to _CrisisColCnt
		CrisisSheet.getCellByPosition(refcol + i, refrow + endofdeck).string = crisisData(i)
	next i

	SetBuryCnt buryDeck, FALSE		
	LogThis &quot;Crisis &quot; &amp; crisisData(0) &amp; &quot; moved to the bottom of the deck.&quot;
	LogBuryCard _CardTypeCrisis, crisisData(0)

	SetCrisisBtns TRUE
end sub		&apos;BuryCrisisCard


sub ThirtyThree
	dim rtncd, crisisID, i, topofdeck as integer
	dim crisisData(_CrisisColCnt) as variant
	
	GetCrisisSheet
	rtncd = MsgBox (&quot;Invoking Thirty-Three will put the Thirty-Three card back into the crisis deck and reshuffle.&quot; &amp; chr(13) &amp; &quot;Do you want to proceed?&quot;,4)
	if rtncd &lt;&gt; 6 then
		exit sub
	end if

	&apos; we need to move the Thirty-Three card to the top of the deck, then reshuffle the deck
	&apos; find Thirty-Three and shuffle it to the &quot;end&quot; of the discard pile
	topofdeck = TopOfCrisisDeck()
	crisisID = 1
	do until crisisID = topofdeck - 1
		if CrisisSheet.getCellByPosition(_CrisisCol + 1, _CrisisRow + crisisID).string = &quot;Thirty-Three&quot; then
			crisisData(0) = CrisisSheet.getCellByPosition(_CrisisCol+1, _CrisisRow + crisisID).string
			crisisData(1) = CrisisSheet.getCellByPosition(_CrisisCol+1, _CrisisRow + crisisID).CharColor
			for i = 2 to _CrisisColCnt
				crisisData(i) = CrisisSheet.getCellByPosition(_CrisisCol + i, _CrisisRow + crisisID).string
			next i
		
			CrisisSheet.getCellByPosition(_CrisisCol+1, _CrisisRow + crisisID).string = CrisisSheet.getCellByPosition(_CrisisCol+1, _CrisisRow + crisisID + 1).string
			CrisisSheet.getCellByPosition(_CrisisCol+1, _CrisisRow + crisisID).CharColor = CrisisSheet.getCellByPosition(_CrisisCol+1, _CrisisRow + crisisID + 1).CharColor
			for i = 2 to _CrisisColCnt
				CrisisSheet.getCellByPosition(_CrisisCol + i, _CrisisRow + crisisID).string = CrisisSheet.getCellByPosition(_CrisisCol + i, _CrisisRow + crisisID + 1).string
			next i
		
			CrisisSheet.getCellByPosition(_CrisisCol+1, _CrisisRow + crisisID + 1).string = crisisData(0)
			CrisisSheet.getCellByPosition(_CrisisCol+1, _CrisisRow + crisisID + 1).CharColor = crisisData(1)
			for i = 2 to _CrisisColCnt
				CrisisSheet.getCellByPosition(_CrisisCol + i, _CrisisRow + crisisID + 1).string = crisisData(i)
			next i
		
		end if
		crisisID = crisisID + 1
	loop

	if CrisisSheet.getCellByPosition(_CrisisCol + 1, _CrisisRow + topofdeck - 1).string &lt;&gt; &quot;Thirty-Three&quot; then
		&apos; we&apos;ve reached the end of the played cards, but didn&apos;t find 33
		MsgBox &quot;Thirty-Three has not been played!?!&quot;
		EnableThirtyThree FALSE
		exit sub
	end if

	CrisisSheet.getCellByPosition(_CrisisCol, _CrisisRow + topofdeck - 1).string = &quot;Thirty-Three&quot;
	CrisisSheet.getCellByPosition(_CrisisCol, _CrisisRow + topofdeck - 1).CharColor = _red
	CrisisSheet.getCellByPosition(_CrisisCol+1, _CrisisRow + topofdeck - 1).string = &quot;&quot;

	ShuffleCrisisDeck TRUE
	
	DisableThirtyThree
	LogThis &quot;Thirty-Three invoked...crisis deck reshuffled&quot;
end sub		&apos;ThirtyThree

sub DisableThirtyThree
	EnableThirtyThree FALSE
end sub

sub EnableThirtyThree (onFlag as boolean)
	GetCrisisSheet
	CrisisForm.getByName(&quot;btn33&quot;).enabled = onFlag
	CrisisForm.getByName(&quot;btn33dis&quot;).enabled = onFlag
	
	if not onFlag then
		Board_ClearSpecial(&quot;Thirty-Three&quot;)
	end if
end sub

sub ReshuffleCrisis
	dim rtncd as integer
	dim whichDeck as string
	GetCrisisSheet
	if OnNewCaprica() then
		whichDeck = &quot;New Caprica Crisis&quot;
	else
		whichDeck = &quot;Crisis&quot;
	end if
	
	rtncd = msgbox (&quot;Do you want to reshuffle the &quot; &amp; WhichDeck &amp; &quot; deck, excluding buried cards?&quot;, 4, &quot;Reshuffle Crisis Deck&quot;)
	if rtncd &lt;&gt; 6 then
		exit sub
	end if
	SetCrisisBtns FALSE
	if OnNewCaprica() then
		ShuffleNCDeck FALSE
	else
		ShuffleCrisisDeck FALSE
	end if
	SetCrisisBtns TRUE
end sub

sub ShuffleCrisisDeck (shuffleALL as boolean)
	dim tmpval, sortOrder(_MaxCrisisCnt) as double
	dim tmpcrisis, crisislst(_MaxCrisisCnt) as variant
	dim crisisdata(_CrisisColCnt) as variant
	dim crisisID, i, j, topofdeck, endofdeck as integer
	GetCrisisSheet
	&apos; to support Thirty-Three, we may need to reshuffle the deck mid-game, so find out where we are starting
	topofdeck=TopOfCrisisDeck()

	if shuffleALL then
		endofdeck = CrisisCnt()
	else
		endofdeck = CrisisCnt() - GetBuryCnt(_DeckCrisis)
	end if
	for crisisID = topofdeck to endofdeck
		sortOrder(crisisID) = rnd()	
		redim crisisdata(_CrisisColCnt) as variant
		for i = 0 to _CrisisColCnt
			crisisdata(i) = CrisisSheet.getCellByPosition(_CrisisCol + i, _CrisisRow + crisisID).string
		next i
		crisisdata(1) = CrisisSheet.getCellByPosition(_CrisisCol, _CrisisRow + crisisID).CharColor
		crisislst(crisisID) = crisisdata()
	next crisisID
	
	for i = topofdeck to endofdeck -1
		for j=i+1 to endofdeck
			if sortOrder(i) &gt; sortOrder(j) then
				tmpval = sortOrder(i)
				tmpcrisis = crisislst(i)
				
				sortOrder(i) = sortOrder(j)
				crisislst(i) = crisislst(j)
				
				sortOrder(j) = tmpval
				crisislst(j) = tmpcrisis
			end if
		next j
	next i
	
	for crisisID = topofdeck to endofdeck
		tmpcrisis = crisislst(crisisID)
		CrisisSheet.getCellByPosition(_CrisisCol, _CrisisRow + crisisID).string = tmpcrisis(0)
		CrisisSheet.getCellByPosition(_CrisisCol, _CrisisRow + crisisID).CharColor = tmpcrisis(1)
		for i = 2 to _CrisisColCnt
			CrisisSheet.getCellByPosition(_CrisisCol + i, _CrisisRow + crisisID).string = tmpcrisis(i)
		next i
	next crisisID
	
	if shuffleALL then
		SetBuryCnt(_DeckCrisis, TRUE) &apos;Not NC, Reset count.
	end if

end sub

sub ShuffleNCDeck (shuffleALL as boolean)
	dim tmpval, sortOrder(_CapricaCnt) as double
	dim tmpcrisis, crisislst(_CapricaCnt) as variant
	dim crisisdata(_CrisisColCnt) as variant
	dim crisisID, i, j, topofdeck, endofdeck as integer
	GetCrisisSheet

	topofdeck=TopOfCapricaDeck()
	if shuffleALL then
		endofdeck = _CapricaCnt
	else
		endofdeck = _CapricaCnt - GetBuryCnt(_DeckNewCaprica)
	end if

	for crisisID = topofdeck to endofdeck
		sortOrder(crisisID) = rnd()	
		redim crisisdata(_CrisisColCnt) as variant			
		for i = 0 to _CrisisColCnt
			crisisdata(i) = CrisisSheet.getCellByPosition(_CapricaCol + i, _CapricaRow + crisisID).string
		next i
		crisisdata(1) = CrisisSheet.getCellByPosition(_CapricaCol, _CapricaRow + crisisID).CharColor
		crisislst(crisisID) = crisisdata()
	next crisisID
	
	for i = topofdeck to endofdeck -1
		for j=i+1 to endofdeck
			if sortOrder(i) &gt; sortOrder(j) then
				tmpval = sortOrder(i)
				tmpcrisis = crisislst(i)
				
				sortOrder(i) = sortOrder(j)
				crisislst(i) = crisislst(j)
				
				sortOrder(j) = tmpval
				crisislst(j) = tmpcrisis
			end if
		next j
	next i
	
	for crisisID = topofdeck to endofdeck
		tmpcrisis = crisislst(crisisID)
		CrisisSheet.getCellByPosition(_CapricaCol, _CapricaRow + crisisID).string = tmpcrisis(0)
		CrisisSheet.getCellByPosition(_CapricaCol, _CapricaRow + crisisID).CharColor = tmpcrisis(1)
		for i = 2 to _CrisisColCnt
			CrisisSheet.getCellByPosition(_CapricaCol + i, _CapricaRow + crisisID).string = tmpcrisis(i)
		next i
	next crisisID
	
	if shuffleALL then
		SetBuryCnt(_DeckNewCaprica, TRUE) 
	end if
end sub

sub ShuffleMissionDeck (shuffleALL as boolean)

end sub

sub ShuffleColonyDeck (shuffleALL as boolean)
	dim tmpval, sortOrder(_ColonyCnt) as double
	dim tmpcrisis, crisislst(_ColonyCnt) as variant
	dim crisisdata(_CrisisColCnt) as variant
	dim crisisID, i, j, topofdeck, endofdeck as integer
	GetCrisisSheet

	topofdeck=TopOfColonyDeck()
	if shuffleALL then
		endofdeck = _ColonyCnt
	else
		endofdeck = _ColonyCnt - GetBuryCnt(_DeckColony)
	end if

	for crisisID = topofdeck to endofdeck
		sortOrder(crisisID) = rnd()	
		redim crisisdata(_CrisisColCnt) as variant			
		for i = 0 to _CrisisColCnt
			crisisdata(i) = CrisisSheet.getCellByPosition(_ColonyCol + i, _ColonyRow + crisisID).string
		next i
		crisisdata(1) = CrisisSheet.getCellByPosition(_ColonyCol, _ColonyRow + crisisID).CharColor
		crisislst(crisisID) = crisisdata()
	next crisisID
	
	for i = topofdeck to endofdeck -1
		for j=i+1 to endofdeck
			if sortOrder(i) &gt; sortOrder(j) then
				tmpval = sortOrder(i)
				tmpcrisis = crisislst(i)
				
				sortOrder(i) = sortOrder(j)
				crisislst(i) = crisislst(j)
				
				sortOrder(j) = tmpval
				crisislst(j) = tmpcrisis
			end if
		next j
	next i
	
	for crisisID = topofdeck to endofdeck
		tmpcrisis = crisislst(crisisID)
		CrisisSheet.getCellByPosition(_ColonyCol, _ColonyRow + crisisID).string = tmpcrisis(0)
		CrisisSheet.getCellByPosition(_ColonyCol, _ColonyRow + crisisID).CharColor = tmpcrisis(1)
		for i = 2 to _CrisisColCnt
			CrisisSheet.getCellByPosition(_ColonyCol + i, _ColonyRow + crisisID).string = tmpcrisis(i)
		next i
	next crisisID
	
	if shuffleALL then
		SetBuryCnt(_DeckColony, TRUE) 
	end if
end sub

function CrisisCardGame (crisisID as integer) as string
	CrisisCardGame = CrisisSheet.getCellByPosition(_CrisisGameTypeCol, _CrisisRow + crisisID).string
end function



&apos; Sort out the cards we aren&apos;t using (based on game type/expansion) and hide them
sub Configure_CrisisCards
	dim currow as integer
	dim tmpval, sortOrder(_MaxCrisisCnt) as double
	dim tmpcrisis, crisislst(_MaxCrisisCnt) as variant
	dim crisisdata(_CrisisColCnt) as variant
	dim crisisID, i, j, topofdeck, endofdeck, gametype, crisistype as integer
	dim usecard as boolean
	GetCrisisSheet
	
	&apos; sort the decks so that any cards we are not using are at the end.
	for crisisID = 1 to _MaxCrisisCnt
		gametype = CrisisCardGame(crisisID)
		crisistype = GetCrisisType(crisisID)
		usecard = TRUE
		if (crisistype = _CrisisTypeAttack and UseCylonFleet()) OR (crisistype = _CrisisTypeCAG and NOT UseCylonFleet()) then
			usecard = FALSE
		end if
			
		if (gametype = &quot;B&quot; OR (gametype = &quot;P&quot; and GameTypeIsPegasus()) OR (gametype = &quot;E&quot; and GameTypeIsExodus()) OR (gametype = &quot;D&quot; and GameTypeIsDaybreak()) OR (gametype = &quot;R&quot; and GameTypeIsRevelations())) AND usecard then
			sortOrder(crisisID) = 0
		else
			sortOrder(crisisID) = 1
		end if

		redim crisisdata(_CrisisColCnt) as variant
		for i = 0 to _CrisisColCnt
			crisisdata(i) = CrisisSheet.getCellByPosition(_CrisisCol + i, _CrisisRow + crisisID).string
		next i
		crisisdata(1) = CrisisSheet.getCellByPosition(_CrisisCol, _CrisisRow + crisisID).CharColor	&apos;special case
		crisislst(crisisID) = crisisdata()
	next crisisID
	
	for i = 1 to _MaxCrisisCnt -1
		for j=i+1 to _MaxCrisisCnt
			if sortOrder(i) &gt; sortOrder(j) then
				tmpval = sortOrder(i)
				tmpcrisis = crisislst(i)
				
				sortOrder(i) = sortOrder(j)
				crisislst(i) = crisislst(j)
				
				sortOrder(j) = tmpval
				crisislst(j) = tmpcrisis
			end if
		next j
	next i
	
	for crisisID = 1 to _MaxCrisisCnt
		tmpcrisis = crisislst(crisisID)
		CrisisSheet.getCellByPosition(_CrisisCol, _CrisisRow + crisisID).string = tmpcrisis(0)
		CrisisSheet.getCellByPosition(_CrisisCol, _CrisisRow + crisisID).CharColor = tmpcrisis(1)
		for i = 2 to _CrisisColCnt
			CrisisSheet.getCellByPosition(_CrisisCol + i, _CrisisRow + crisisID).string = tmpcrisis(i)
		next i
	next crisisID
		
	&apos; show all the rows we&apos;ll need, hide the others.
	for currow = 1 to _MaxCrisisCnt
		if currow &lt;= CrisisCnt() then
			CrisisSheet.Rows(_CrisisRow + currow).IsVisible = TRUE
		else
			CrisisSheet.Rows(_CrisisRow + currow).IsVisible = FALSE
		end if
	next currow

	&apos; if we&apos;re not playing ObjectiveIsNewCaprica(), go ahead and hide the new caprica crisis card section
	&apos; in this case we hide or show the whole deck, so the &quot;deck size&quot; row is included
	for currow = 0 to _CapricaCnt + 1 
		if ObjectiveIsNewCaprica() then
			CrisisSheet.Rows(_CapricaRow + currow).IsVisible = TRUE
		else
			CrisisSheet.Rows(_CapricaRow + currow).IsVisible = FALSE
		end if
	next currow
	
	&apos; If we&apos;re not playing with ObjectiveIsEarth(), hide the Mission deck.
	for currow = -1 to _MissionCnt + 1
			CrisisSheet.Rows(_MissionRow + currow).IsVisible	= ObjectiveIsEarth()
	next currow

	&apos; if we&apos;re not playing ObjectiveIsColony(), go ahead and hide theColony crisis card section
	&apos; in this case we hide or show the whole deck, so the &quot;deck size&quot; row is included
	for currow = 0 to _ColonyCnt + 1 
		if ObjectiveIsColony() then
			CrisisSheet.Rows(_ColonyRow + currow).IsVisible = TRUE
		else
			CrisisSheet.Rows(_ColonyRow + currow).IsVisible = FALSE
		end if
	next currow

	CrisisSheet.getCellByPosition(_MaxCrisisDeckCol, _MaxDeckRow).value = CrisisCnt()
end sub	&apos;Configure_CrisisCards


sub Initialize_CrisisCards
	dim crisisID as integer
	
	GetCrisisSheet
	for crisisID = 1 to CrisisCnt()
		if CrisisSheet.getCellByPosition(_CrisisCol, _CrisisRow + crisisID).string = &quot;&quot; then
			CrisisSheet.getCellByPosition(_CrisisCol, _CrisisRow + crisisID).string = 	CrisisSheet.getCellByPosition(_CrisisCol + 1, _CrisisRow + crisisID).string
			CrisisSheet.getCellByPosition(_CrisisCol, _CrisisRow + crisisID).CharColor = 	CrisisSheet.getCellByPosition(_CrisisCol + 1, _CrisisRow + crisisID).CharColor
		end if
		CrisisSheet.getCellByPosition(_CrisisCol + 1, _CrisisRow + crisisID).string = &quot;&quot;
	next crisisID
	
	for crisisID = 1 to _CapricaCnt
		if CrisisSheet.getCellByPosition(_CapricaCol, _CapricaRow + crisisID).string = &quot;&quot; then
			CrisisSheet.getCellByPosition(_CapricaCol, _CapricaRow + crisisID).string = CrisisSheet.getCellByPosition(_CapricaCol + 1, _CapricaRow + crisisID).string
			CrisisSheet.getCellByPosition(_CapricaCol, _CapricaRow + crisisID).CharColor = CrisisSheet.getCellByPosition(_CapricaCol + 1, _CapricaRow + crisisID).CharColor
		end if
		CrisisSheet.getCellByPosition(_CapricaCol + 1, _CapricaRow + crisisID).string = &quot;&quot;
	next crisisID
	
	for crisisID = 1 to _MissionCnt
		if CrisisSheet.getCellByPosition(_MissionCol, _MissionRow + crisisID).string = &quot;&quot; then
			CrisisSheet.getCellByPosition(_MissionCol, _MissionRow + crisisID).string	= CrisisSheet.getCellByPosition(_MissionDiscardCol, _MissionRow + crisisID).string
		end if
		CrisisSheet.getCellByPosition(_MissionActiveCol, _MissionRow + crisisID).string	= &quot;&quot;
		CrisisSheet.getCellByPosition(_MissionDiscardCol, _MissionRow + crisisID).string	= &quot;&quot;
	next crisisID
	
	for crisisID = 1 to _ColonyCnt
		if CrisisSheet.getCellByPosition(_ColonyCol, _ColonyRow + crisisID).string = &quot;&quot; then
			CrisisSheet.getCellByPosition(_ColonyCol, _ColonyRow + crisisID).string = CrisisSheet.getCellByPosition(_ColonyCol + 1, _ColonyRow + crisisID).string
			CrisisSheet.getCellByPosition(_ColonyCol, _ColonyRow + crisisID).CharColor = CrisisSheet.getCellByPosition(_ColonyCol + 1, _ColonyRow + crisisID).CharColor
		end if
		CrisisSheet.getCellByPosition(_ColonyCol+1, _ColonyRow + crisisID).string = &quot;&quot;
	next crisisID
	
	SetBuryCnt _DeckCrisis, TRUE
	SetBuryCnt _DeckNewCaprica, TRUE
	SetBuryCnt _DeckMission, TRUE
	SetBuryCnt _DeckColony, TRUE
	
	Configure_CrisisCards
	ShuffleCrisisDeck TRUE
	ShuffleNCDeck TRUE
	ShuffleMissionDeck TRUE
	ShuffleColonyDeck TRUE
	ResetColors
	EnableThirtyThree FALSE
	
	SetCrisisStartButton (&quot;&quot;, _CrisisTypeNone)
	ClearCrisisFlags

end sub	&apos;Initialize_CrisisCards


function SuperCrisisCardGame (crisisID as integer) as string
	SuperCrisisCardGame = CrisisSheet.getCellByPosition(_CrisisGameTypeCol, _SuperRow + crisisID).string
end function


&apos; Sort out the cards we aren&apos;t using (based on game type/expansion) and hide them
sub Configure_SuperCrisisCards
	dim currow as integer
	dim tmpval, sortOrder(_MaxSuperCnt) as double
	dim tmpcrisis, crisislst(_MaxSuperCnt) as variant
	dim crisisdata(_CrisisColCnt) as variant
	dim gametype as string
	dim crisisID, i, j, topofdeck, endofdeck as integer
	dim useCard as boolean
	GetCrisisSheet
	
	&apos; sort the decks so that any cards we are not using are at the end.
	for crisisID = 1 to _MaxSuperCnt
		tmpcrisis = CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + crisisID).string
		useCard = TRUE
		if	(((tmpcrisis = &quot;Massive Assault&quot;) OR (tmpcrisis = &quot;Lured into a Trap&quot;)) and UseCylonFleet()) OR _
				(tmpcrisis = &quot;Fighting Blind&quot; and NOT UseCylonFleet()) _
		then
			useCard = FALSE
		end if		
		gametype = SuperCrisisCardGame(crisisID)
		if (gametype = &quot;B&quot; OR (gametype = &quot;P&quot; and GameTypeIsPegasus()) OR (gametype = &quot;E&quot; and GameTypeIsExodus()) OR (gametype = &quot;R&quot; and GameTypeIsRevelations())) AND useCard then
			sortOrder(crisisID) = 0
		else
			sortOrder(crisisID) = 1
		end if
		
		redim crisisdata(_CrisisColCnt) as variant
		for i = 0 to _CrisisColCnt
			crisisdata(i) = CrisisSheet.getCellByPosition(_SuperCol + i, _SuperRow + crisisID).string
		next i
		crisisdata(1) = CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + crisisID).CharColor	&apos;special case
		crisislst(crisisID) = crisisdata()
	next crisisID
	
	for i = 1 to _MaxSuperCnt - 1
		for j=i+1 to _MaxSuperCnt
			if sortOrder(i) &gt; sortOrder(j) then
				tmpval = sortOrder(i)
				tmpcrisis = crisislst(i)
				
				sortOrder(i) = sortOrder(j)
				crisislst(i) = crisislst(j)
				
				sortOrder(j) = tmpval
				crisislst(j) = tmpcrisis
			end if
		next j
	next i
	
	for crisisID = 1 to _MaxSuperCnt
		tmpcrisis = crisislst(crisisID)
		CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + crisisID).string = tmpcrisis(0)
		CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + crisisID).CharColor = tmpcrisis(1)
		for i = 2 to _CrisisColCnt
			CrisisSheet.getCellByPosition(_SuperCol + i, _SuperRow + crisisID).string = tmpcrisis(i)
		next i
	next crisisID
		
	&apos; show all the rows we&apos;ll need, hide the others.
	for currow = 1 to _MaxSuperCnt
		if currow &lt;= SuperCrisisCnt() then
			CrisisSheet.Rows(_SuperRow + currow).IsVisible = TRUE
		else
			CrisisSheet.Rows(_SuperRow + currow).IsVisible = FALSE
		end if
	next currow
	
	CrisisSheet.getCellByPosition(_MaxSuperCrisisDeckCol, _MaxDeckRow).value = SuperCrisisCnt()
end sub	&apos;Configure_SuperCrisisCards



&apos; this may not live here, but it&apos;s okay for now
sub Initialize_Super
	dim superID, maxcnt as integer
	dim tmpval, sortOrder(_MaxSuperCnt) as double
	dim tmpsuper, superlst(_MaxSuperCnt) as variant
	dim crisisdata(_CrisisColCnt) as variant
	dim i, j as integer
	
	GetCrisisSheet
	Configure_SuperCrisisCards
	
	maxcnt = SuperCrisisCnt()
	for superID = 1 to maxcnt
		if CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string = &quot;&quot; then
			CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string = 	CrisisSheet.getCellByPosition(_SuperCol + 2, _SuperRow + superID).string
		end if
		CrisisSheet.getCellByPosition(_SuperCol+1, _SuperRow + superID).string = &quot;&quot;
		CrisisSheet.getCellByPosition(_SuperCol+2, _SuperRow + superID).string = &quot;&quot;	
		sortOrder(superID) = rnd()	
		redim crisisdata(_CrisisColCnt) as variant
		for i = 0 to _CrisisColCnt
			crisisdata(i) = CrisisSheet.getCellByPosition(_SuperCol + i, _SuperRow + superID).string
		next i
		superlst(superID) = crisisdata()
	next superID
	
	for i = 1 to maxcnt -1
		for j=i+1 to maxcnt
			if sortOrder(i) &gt; sortOrder(j) then
				tmpval = sortOrder(i)
				tmpsuper = superlst(i)
				
				sortOrder(i) = sortOrder(j)
				superlst(i) = superlst(j)
				
				sortOrder(j) = tmpval
				superlst(j) = tmpsuper
			end if
		next j
	next i
	
	for superID = 1 to maxcnt
		tmpsuper = superlst(superID)
		CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string = tmpsuper(0)
		for i = 6 to _CrisisColCnt
			CrisisSheet.getCellByPosition(_SuperCol+i, _SuperRow + superID).string = tmpsuper(i)
		next i
	next superID

	ResetSuperColors
end sub

sub DealSuperCrisisBtn
	dim playerID as integer
	getGS
	
	playerID = GetCurrentPlayer()
	DealSuperCrisis playerID
end sub

sub DealSuperCrisis (playerID as integer)
	dim superID as integer
	dim cpn as string
	GetCrisisSheet

	cpn = GetPlayerName(playerID)
	if cpn = &quot;Destiny&quot; then
		MsgBox &quot;Select a player first&quot;
		exit sub
	end if
	for superID = 1 to _MaxSuperCnt
		if CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string &lt;&gt; &quot;&quot; and CrisisSheet.getCellByPosition(_SuperCol+1, _SuperRow + superID).string = &quot;&quot; then
			&apos;found the top of the deck
			CrisisSheet.getCellByPosition(_SuperCol + 1, _SuperRow + superID).string = cpn

			SetSCCount playerID, GetSCCount(playerID) + 1

			MsgBox &quot;Super Crisis &apos;&quot; &amp; CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string &amp; &quot;&apos; has been dealt to &quot; &amp; cpn
			LogThis &quot;Super Crisis &apos;&quot; &amp; CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string &amp; &quot;&apos; has been dealt to &quot; &amp; cpn
			exit for
		end if
	next superID
	SetSuperCrisisBtns
end sub

sub PlaySuperCrisis
	&apos;this can only be for the current player 
	dim superID, skillID, difficulty, partial as integer
	dim cpn, skillsincheck(5), tmplst(), supername as string
	dim consequence as boolean
	GetCrisisSheet

	tmplst = CrisisForm.getByName(&quot;lstSuperCrisis&quot;).SelectedItems()
	if ubound(tmplst) &lt; 0 then
		MsgBox &quot;Please select a Super Crisis to play.&quot;,0,&quot;Play Super Crisis&quot;
		exit sub
	end if
	
	supername = CrisisForm.getByName(&quot;lstSuperCrisis&quot;).StringItemList(val(tmplst(0)))

	cpn = GetPlayerName(GetCurrentPlayer())
	
	for superID = 1 to _MaxSuperCnt
		if CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string = supername then
			exit for
		end if
	next superID
	
	if MsgBox (&quot;Does &quot; &amp; cpn &amp; &quot; want to play &apos;&quot; &amp; supername &amp; &quot;&apos;?&quot; ,4, &quot;Play Super Crisis&quot;) &lt;&gt; 6 then
		exit sub
	end if

	if CrisisSheet.getCellByPosition(_CrisisValueCol, _SuperRow + superID).string &lt;&gt; &quot;&quot; then
		for skillid = _SkillIDMin to _SkillIDBaseMax
			skillsincheck(skillid) = CrisisSheet.getCellByPosition(_CrisisSkillCol + skillID, _SuperRow + superID).string
		next skillid
		
		difficulty = CrisisSheet.getCellByPosition(_CrisisValueCol, _SuperRow + superID).string
		if CrisisSheet.getCellByPosition(_CrisisValueCol + 1, _SuperRow + superID).string = &quot;&quot; then
			partial	= 0
		else
			partial = CrisisSheet.getCellByPosition(_CrisisValueCol + 1, _SuperRow + superID).string
		end if
		consequence = CrisisSheet.getCellByPosition(_CrisisValueCol + 2, _SuperRow + superID).string &lt;&gt; &quot;&quot;
		
		&apos; set up the skill check
		StartSkillCheck(supername, skillsincheck, difficulty, FALSE, partial, consequence)
		
	elseif CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string = &quot;Massive Assault&quot; or CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string = &quot;Lured into a Trap&quot; then
		&apos; this is a Massive Assault
		DeployCylonShips _SuperRow - _CrisisRow + superID
	end if

	CrisisSheet.getCellByPosition(_SuperCol + 2, _SuperRow + superID).string	= CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string 
	CrisisSheet.getCellByPosition(_SuperCol + 2, _SuperRow + superID).CharColor	= CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).CharColor
	CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string = &quot;&quot;
	CrisisSheet.getCellByPosition(_SuperCol+1, _SuperRow + superID).string = &quot;&quot;
	
	SetSCCount GetCurrentPlayer(), GetSCCount(GetCurrentPlayer()) - 1

	LogThis &quot;SUPER CRISIS: &quot; &amp; CrisisSheet.getCellByPosition(_SuperCol + 2, _SuperRow + superID).string
	SetSuperCrisisBtns

	if CrisisSheet.getCellByPosition(_SuperCol + 2, _SuperRow + superID).string  = &quot;Bomb on Colonial One&quot; then
		MsgBox &quot;If the crisis check fails, be sure to hit the &quot;&quot;Destroy Colonial One&quot;&quot; button at the top!&quot;
		CrisisForm.getByName(&quot;btnColonialOne&quot;).enabled = TRUE
	elseif CrisisSheet.getCellByPosition(_SuperCol + 2, _SuperRow + superID).string  = &quot;Frak Earth&quot; then
		EnableSpecialDistance(&quot;Frak Earth&quot;)
	end if
end sub

sub SetCrisisBtns (enflag as boolean)
	CrisisForm.getByName(&quot;btnPlayCrisis&quot;).enabled = enflag
	CrisisForm.getByName(&quot;btnBuryCrisis&quot;).enabled = enflag
	CrisisForm.getByName(&quot;btnReshuffle&quot;).enabled = enflag
end sub


sub DiscardSuperCrisis
	&apos;this is to discard and get a new one
	&apos;find the super crisis in the current player&apos;s hand
	GetCrisisSheet
	dim superID as integer
	dim cpn as string
	cpn = GetPlayerName(GetCurrentPlayer())
	for superID = 1 to _MaxSuperCnt
		if CrisisSheet.getCellByPosition(_SuperCol+1, _SuperRow + superID).string = cpn then
			exit for
		end if
	next superID
	if MsgBox (&quot;Does &quot; &amp; cpn &amp; &quot; really want to discard the Super Crisis &apos;&quot; &amp; CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string &amp; &quot;&apos; and get a new one?&quot; ,4) = 6 then
		LogThis cpn &amp; &quot; discards Super Crisis: &quot; &amp; CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string 
		CrisisSheet.getCellByPosition(_SuperCol+2, _SuperRow + superID).string =CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string 
		CrisisSheet.getCellByPosition(_SuperCol+2, _SuperRow + superID).CharColor =CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).CharColor
		CrisisSheet.getCellByPosition(_SuperCol+1, _SuperRow + superID).string = &quot;&quot; 
		CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string = &quot;&quot;
		DealSuperCrisis GetCurrentPlayer()
	end if
	
end sub		&apos;DiscardSuperCrisis

sub SetSuperCrisisBtns
	dim cpn as string
	dim superlst(13) as string
	dim superID, scCnt, sel(1) as integer
	GetCrisisSheet
	scCnt = 0

	cpn = GetPlayerName(GetCurrentPlayer())
	for superID = 1 to _MaxSuperCnt
		if CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string &lt;&gt; &quot;&quot; and _
				CrisisSheet.getCellByPosition(_SuperCol+1, _SuperRow + superID).string = cpn _
		then
			superlst(scCnt) = CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string
			scCnt = scCnt + 1
		end if
	next superID
	if scCnt &gt; 0 then
		CrisisForm.getByName(&quot;btnPlaySuperCrisis&quot;).enabled =TRUE
		CrisisForm.getByName(&quot;lstSuperCrisis&quot;).StringItemList=superlst()
		sel(0)=0
		CrisisForm.getByName(&quot;lstSuperCrisis&quot;).SelectedItems()=sel()
		if scCnt &gt; 1 then
			CrisisForm.getByName(&quot;lstSuperCrisis&quot;).enabled = TRUE
		end if
		if GameTypeIsBase() then
			CrisisForm.getByName(&quot;btnDiscardSuperCrisis&quot;).enabled = TRUE
		end if
	else
		CrisisForm.getByName(&quot;btnPlaySuperCrisis&quot;).enabled =FALSE
		CrisisForm.getByName(&quot;lstSuperCrisis&quot;).StringItemList=g_emptylst()
		CrisisForm.getByName(&quot;lstSuperCrisis&quot;).enabled = FALSE
		CrisisForm.getByName(&quot;btnDiscardSuperCrisis&quot;).enabled = FALSE
	end if
	
	if IsRevealed(GetCurrentPlayer()) and not IsInfiltrating(GetCurrentPlayer()) then
		CrisisForm.getByName(&quot;btnDealSuper&quot;).enabled = TRUE
	else
		CrisisForm.getByName(&quot;btnDealSuper&quot;).enabled = FALSE
	end if
	
	CrisisForm.getByName(&quot;btnDetector&quot;).enabled = FALSE
	CrisisForm.getByName(&quot;btnColonialOne&quot;).enabled = FALSE
end sub

sub ResetColors
	dim crisisID as integer
	dim crisisColor as variant
	
	crisisColor = Array (_black, _purple, _green, _blue, _blue2, _red)
	
	GetCrisisSheet

	for crisisID = 1 to CrisisCnt()
		CrisisSheet.getCellByPosition(_CrisisCol, _CrisisRow + crisisID).CharColor = crisisColor(GetCrisisType(crisisID))
	next crisisID
end sub

sub ResetSuperColors
	dim superID as integer
	dim crisistxt as string

	for superID = 1 to _MaxSuperCnt
		crisistxt = CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).string
		if (crisistxt = &quot;Massive Assault&quot;) or (crisistxt = &quot;Lured into a Trap&quot;) then
			CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).CharColor = _red
			
		elseif crisistxt = &quot;Psychological Warfare&quot; then
			CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).CharColor = _green
			
		elseif crisistxt = &quot;Demand Peace&apos; Manifesto&quot; then
			CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).CharColor = _blue
			
		elseif crisistxt = &quot;Fighting Blind&quot; then
			CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).CharColor = _blue2
			
		else
			CrisisSheet.getCellByPosition(_SuperCol, _SuperRow + superID).CharColor = _black
		end if
	next superID
end sub

sub DetectorSabotage
	&apos;called when there was a failed Detector Sabotage skill check
	GetCrisisSheet
	Board_SetSpecial &quot;Detector Sabotage&quot;
	CrisisForm.getByName(&quot;btnDetector&quot;).enabled = FALSE
	MsgBox &quot;Special Effect: Detector Sabotage is now in play.&quot;
	LogThis &quot;Special Effect: Detector Sabotage is now in play.&quot;
end sub

sub ColonialOne
	&apos;called when C1 has been destroyed
	dim playerid as integer
	GetCrisisSheet
	Board_SetSpecial &quot;Colonial One&quot;
	CrisisForm.getByName(&quot;btnColonialOne&quot;).enabled = FALSE
	MsgBox &quot;Special Effect: Colonial One has been Destroyed!&quot;
	LogThis &quot;Special Effect: Colonial One has been Destroyed!&quot;
	for playerid=1 to PlayerCnt()
		if IsColonialOneLoc(GetPlayerLoc(playerid)) then
			SetPlayerLoc playerid, &quot;Sickbay&quot;
			MsgBox GetPlayerName(playerID) &amp; &quot; sent to Sickbay.&quot;
			LogThis GetPlayerName(playerID) &amp; &quot; sent to Sickbay.&quot;
		end if
	next playerid
	if ObjectiveIsIonianNebula() then
		ClearLocationAllies &quot;Colonial One&quot;
	end if

end sub

sub VerifyCrisisDeck
	dim crisisID, i, j, k, errcnt, err2cnt as integer
	dim crisislst(_MaxCrisisCnt, _CrisisColCnt) as string
	dim masterlst(_MaxCrisisCnt, _CrisisColCnt) as string
	dim errstr, err2str, err3str as string
	GetCrisisSheet
	
	GetRef2	
	for crisisID = 1 to _MaxCrisisCnt
		crisislst(crisisID,1) = &quot;&quot;
		if CrisisSheet.getCellByPosition(_CrisisCol, _CrisisRow + crisisID).string &lt;&gt; &quot;&quot; then
			crisislst(crisisID,0) = CrisisSheet.getCellByPosition(_CrisisCol, _CrisisRow + crisisID).string
		else
			crisislst(crisisID,0) = CrisisSheet.getCellByPosition(_CrisisCol + 1, _CrisisRow + crisisID).string
		end if
		masterlst(crisisID,0) = Ref2Sheet.getCellByPosition(_CrisisCol, _CrisisRow + crisisID).string
		for i = 2 to _CrisisColCnt
			crisislst(crisisID,i) = CrisisSheet.getCellByPosition(_CrisisCol+i, _CrisisRow + crisisID).string
			masterlst(crisisID,i) = Ref2Sheet.getCellByPosition(_CrisisCol+i, _CrisisRow + crisisID).string
		next i
	next crisisID
	
	for i = 1 to _MaxCrisisCnt
		for j = 1 to _MaxCrisisCnt
			if crisislst(i,0) = masterlst(j,0) then 
				for k = 2 to _CrisisColCnt
					if crisislst(i,k) &lt;&gt; masterlst(j,k) then 
						if crisislst(i,1) = &quot;&quot; then
							crisislst(i,1) = crisislst(i,0) &amp; &quot; (Cols out of sync: &quot; &amp; k
						else
							crisislst(i,1) = crisislst(i,1) &amp; &quot;, &quot; &amp; k							
						end if
					end if
				next k
				if crisislst(i,1) &lt;&gt; &quot;&quot; then
					crisislst(i,1) = crisislst(i,1) &amp; &quot;)&quot; 
				end if
				crisislst(i,0) = &quot;&quot;
				masterlst(j,0) = &quot;&quot;
				exit for
			end if
		next j
	next i

	errcnt = 0
	for i = 1 to _MaxCrisisCnt
		if crisislst(i,0) &lt;&gt; &quot;&quot; then
			errcnt = errcnt + 1
			errstr = errstr &amp; &quot;--&quot; &amp;  crisislst(i,0) &amp; chr(13)
		end if
		if masterlst(i,0) &lt;&gt; &quot;&quot; then
			err2str = err2str &amp; &quot;--&quot; &amp;  masterlst(i,0) &amp; chr(13)
		end if
	next i
	
	err2cnt = 0
	for i = 1 to _MaxCrisisCnt
		if crisislst(i,1) &lt;&gt; &quot;&quot; then
			err2cnt = err2cnt + 1
			err3str = err3str &amp; &quot;--&quot; &amp; crisislst(i,1) &amp; chr(13)
		end if
	next i
	
	if errcnt + err2cnt = 0 then
		MsgBox &quot;ALL CORRECT!&quot;, 0, &quot;Crisis Deck Validation&quot;
	else
		if errcnt &gt; 0 then
			MsgBox errcnt &amp; &quot; Errors found! &quot; &amp; chr(13) &amp; &quot;Extras in Crisis:&quot; &amp; chr(13) _
				 &amp; errstr &amp; &quot;Extras in Master:&quot; &amp; chr(13) &amp; err2str, 0, &quot;Crisis Deck Validation&quot;
		end if
		if err2cnt &gt; 0 then
			MsgBox err2cnt &amp; &quot; Sync errors found!&quot; &amp; chr(13) &amp; err3str, 0, &quot;Crisis Deck Validation&quot;
		end if
		
	end if
end sub	&apos;VerifyCrisisDeck

sub BattleOfNewCaprica
	GetCrisisSheet
	MsgBox &quot;Setting up the Battle of New Caprica.&quot;
	DeployCylonShips(_BattleOfNewCapricaID)
end sub

sub BattleOfIonianNebula
	GetCrisisSheet
	MsgBox &quot;Setting up the Battle of the Ionian Nebula.&quot;
	DeployCylonShips(_BattleOfIonianNebulaID)
end sub
</script:module>